<?php
if (!defined('_PS_VERSION_')) exit; include_once(_PS_MODULE_DIR_.'soobrandlogoslider/controllers/admin/int.php'); class SoobrandLogoSlider extends Module { public function __construct() { $this->name = 'soobrandlogoslider'; $this->tab = 'front_office_features'; $this->version = '3.4.1'; $this->author = 'PrestaSOO'; $this->module_key = ''; $this->ps_versions_compliancy = array('min' => '1.6', 'max' => '1.8'); $this->bootstrap = true; $this->secure_key = Tools::encrypt($this->name); parent::__construct(); $this->displayName = $this->l('SOO Brand Logo Slider'); $this->description = $this->l('Display Responsive Manufacture logo carousel'); $this->confirmUninstall = $this->l('Are you sure you want to uninstall?'); } public function install() { $return = parent::install() && $this->installModuleTab('AdminSoobrandlogoSlider', 'SOO Brand Logo Slider') && $this->registerHook('displayFooterBefore') && $this->registerHook('displayHeader') && Configuration::updateValue('config_input1', '7') && Configuration::updateValue('config_input3', '5000') && $this->registerHook('actionAdminControllerSetMedia') && Configuration::updateValue('config_input4', '500') && Configuration::updateValue('config_radio1', 0) && Configuration::updateValue('config_radio2', 1) && Configuration::updateValue('config_radio4', 0) && Configuration::updateValue('config_radio5', 0) && Configuration::updateValue('config_select1', 'medium') && $this->registerHook('displayBackOfficeHeader'); return (bool) $return; } public function uninstall() { $this->uninstallModuleTab('AdminSoobrandlogoSlider'); if (!parent::uninstall()) return false; SOOUpgrade::update($this->module_key); return true; } private function installModuleTab($tab_class, $tab_name) { $languages = Language::getLanguages(); $id_tab = Tab::getIdFromClassName('strikethrough'); if ($id_tab == false) { $parent_tab = new Tab(); foreach ($languages as $language) { $parent_tab->name[$language['id_lang']] = 'PrestaSOO'; } $parent_tab->class_name = 'strikethrough'; $parent_tab->id_parent = 0; $parent_tab->module = ''; $parent_tab->add(); } else { $parent_tab = new Tab($id_tab); } $tab = new Tab(); foreach ($languages as $language) { $tab->name[$language['id_lang']] = $tab_name; } $tab->class_name = $tab_class; $tab->module = $this->name; $tab->id_parent = $parent_tab->id; $tab->add(); return true; } private function uninstallModuleTab($tab_class) { $id_tab = Tab::getIdFromClassName($tab_class); if ($id_tab) { $tab = new Tab($id_tab); $parent_id = $tab->id_parent; $tab->delete(); $number = Tab::getNbTabs($parent_id); if ($number == 0) { $parent_tab = new Tab($parent_id); $parent_tab->delete(); } return true; } return false; } public function hookDisplayBackOfficeHeader() { $this->context->controller->addJs($this->_path.'views/js/src.js'); } public function getContent() { $output = null; SOOUpgrade::update($this->module_key); if (Tools::isSubmit('submit'.$this->name)) { if (Validate::isInt(Tools::getValue('config_input1')) && Validate::isInt(Tools::getValue('config_input3')) && Validate::isInt(Tools::getValue('config_input4'))) { $proconfiginput1 = Tools::getValue('config_input1'); $proconfiginput3 = Tools::getValue('config_input3'); $proconfiginput4 = Tools::getValue('config_input4'); $proconfigselect1 = Tools::getValue('config_select1'); $proconfigradio1 = Tools::getValue('config_radio1'); $proconfigradio2 = Tools::getValue('config_radio2'); $proconfigradio4 = Tools::getValue('config_radio4'); $proconfigradio5 = Tools::getValue('config_radio5'); Configuration::updateValue('config_input1', $proconfiginput1); Configuration::updateValue('config_input3', $proconfiginput3); Configuration::updateValue('config_input4', $proconfiginput4); Configuration::updateValue('config_select1', $proconfigselect1); Configuration::updateValue('config_radio1', $proconfigradio1); Configuration::updateValue('config_radio2', $proconfigradio2); Configuration::updateValue('config_radio4', $proconfigradio4); Configuration::updateValue('config_radio5', $proconfigradio5); $output .= $this->displayConfirmation($this->l('Settings updated')); } else $output .= Tools::displayError('Invalid Values'); } $this->context->smarty->assign( array( 'soomm_ajax_url' => $this->context->link->getAdminLink('AdminModules'), 'isconfigpage' => true, 'thisversion' => $this->version, 'kontent' => SOOUpgrade::kontent($this->name), 'thispath' => $this->_path, 'livev' => SOOUpgrade::version($this->name), ) ); return $this->display('soobrandlogoslider', '/views/templates/admin/pre.sooicons.tpl').$output.$this->displayForm().$this->display('soobrandlogoslider', '/views/templates/admin/after.sooicons.tpl'); } public function displayForm() { $this->_display = 'index'; $options = array( array( 'id_option' => 'large', 'name' => $this->l('large') ), array( 'id_option' => 'medium', 'name' => $this->l('medium') ), array( 'id_option' => 'small', 'name' => $this->l('small') ), ); $fields_form = array(); $fields_form[0]['form'] = array( 'legend' => array( 'title' => $this->l('Settings'), ), 'input' => array( array( 'type' => 'text', 'label' => $this->l('The number of visible items'), 'name' => 'config_input1' ), array( 'type' => 'text', 'label' => $this->l('Pause (in miliseconds)'), 'name' => 'config_input3' ), array( 'type' => 'text', 'label' => $this->l('Duration (in miliseconds)'), 'name' => 'config_input4' ), array( 'type' => 'select', 'label' => $this->l('Select image type'), 'name' => 'config_select1', 'required' => false, 'options' => array( 'query' => $options, 'id' => 'id_option', 'name' => 'name' ) ), array( 'type' => 'switch', 'label' => $this->l('Auto start'), 'name' => 'config_radio1', 'required' => true, 'class' => 't', 'is_bool' => true, 'values' => array( array( 'id' => 'active_on', 'value' => 1, 'label' => $this->l('Enabled') ), array( 'id' => 'active_off', 'value' => 0, 'label' => $this->l('Disabled') ) ), ), array( 'type' => 'switch', 'label' => $this->l('Random'), 'name' => 'config_radio2', 'required' => true, 'class' => 't', 'is_bool' => true, 'values' => array( array( 'id' => 'active_on', 'value' => 1, 'label' => $this->l('Enabled') ), array( 'id' => 'active_off', 'value' => 0, 'label' => $this->l('Disabled') ) ), ), array( 'type' => 'switch', 'label' => $this->l('Infinite'), 'name' => 'config_radio4', 'required' => true, 'class' => 't', 'is_bool' => true, 'values' => array( array( 'id' => 'active_on', 'value' => 1, 'label' => $this->l('Enabled') ), array( 'id' => 'active_off', 'value' => 0, 'label' => $this->l('Disabled') ) ), ), array( 'type' => 'switch', 'label' => $this->l('Mouseover pause'), 'name' => 'config_radio5', 'required' => true, 'class' => 't', 'is_bool' => true, 'values' => array( array( 'id' => 'active_on', 'value' => 1, 'label' => $this->l('Enabled') ), array( 'id' => 'active_off', 'value' => 0, 'label' => $this->l('Disabled') ) ), ) ), 'submit' => array( 'title' => $this->l('Save'), 'class' => 'button' ) ); $helper = new HelperForm(); $helper->title = $this->displayName; $helper->show_toolbar = true; $helper->toolbar_scroll = true; $helper->submit_action = 'submit'.$this->name; $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false) .'&configure='.$this->name.'&tab_module='.$this->tab.'&module_name='.$this->name; $helper->token = Tools::getAdminTokenLite('AdminModules'); $helper->toolbar_btn = array( 'save' => array( 'desc' => $this->l('Save'), 'href' => AdminController::$currentIndex.'&configure='.$this->name.'&save'.$this->name. '&token='.Tools::getAdminTokenLite('AdminModules'), ), 'back' => array( 'href' => AdminController::$currentIndex.'&token='.Tools::getAdminTokenLite('AdminModules'), 'desc' => $this->l('Back to list') ) ); $helper->fields_value['config_input1'] = Configuration::get('config_input1'); $helper->fields_value['config_input3'] = Configuration::get('config_input3'); $helper->fields_value['config_input4'] = Configuration::get('config_input4'); $helper->fields_value['config_select1'] = Configuration::get('config_select1'); $helper->fields_value['config_radio1'] = Configuration::get('config_radio1'); $helper->fields_value['config_radio2'] = Configuration::get('config_radio2'); $helper->fields_value['config_radio4'] = Configuration::get('config_radio4'); $helper->fields_value['config_radio5'] = Configuration::get('config_radio5'); return $helper->generateForm($fields_form); } public function hookActionAdminControllerSetMedia() { if (get_class($this->context->controller) == 'AdminModulesController') { $this->context->controller->addCSS(__PS_BASE_URI__.'modules/'.$this->name.'/views/css/admin.prestasoo.css'); $this->context->controller->addCSS(__PS_BASE_URI__.'modules/'.$this->name.'/views/css/material.min.css'); } } private function initForm() { $helper = new HelperForm(); $helper->module = $this; $helper->name_controller = 'soobrandlogoslider'; $helper->identifier = $this->identifier; $helper->token = Tools::getAdminTokenLite('AdminModules'); $helper->languages = $this->context->controller->_languages; $helper->currentIndex = AdminController::$currentIndex.'&configure='.$this->name; $helper->default_form_language = $this->context->controller->default_form_language; $helper->allow_employee_form_lang = $this->context->controller->allow_employee_form_lang; $helper->toolbar_scroll = true; $helper->toolbar_btn = $this->initToolbar(); return $helper; } public function displayFooterBefore($params) { $proconfigselect1 = Configuration::get('config_select1'); $id_current_shop_group = Shop::getContextShopGroupID(); $brandcarousel = Manufacturer::getManufacturers(true, $this->context->language->id, true, false, false, false, $id_current_shop_group); $this->context->smarty->assign(array( 'imageSize' => (version_compare(_PS_VERSION_, '1.5.4', '>=') == true) ? Image::getSize(ImageType::getFormatedName($proconfigselect1)) : Image::getSize($proconfigselect1.'_default'), 'imageName' => $proconfigselect1, 'brandcarousel' => $brandcarousel )); $this->context->smarty->assign(array( 'proinput1' => Configuration::get('config_input1'), 'proinput3' => Configuration::get('config_input3'), 'proinput4' => Configuration::get('config_input4'), 'proselect1' => Configuration::get('config_select1'), 'proradio1' => Configuration::get('config_radio1'), 'proradio2' => Configuration::get('config_radio2'), 'proradio4' => Configuration::get('config_radio4'), 'proradio5' => Configuration::get('config_radio5'), ) ); if (version_compare(_PS_VERSION_, '1.7', '<')) { return $this->display(__FILE__, 'soobrandlogoslider.tpl'); } else { $this->context->smarty->assign(array( 'img_manu_dir' => _PS_IMG_.'m/', ) ); return $this->display(__FILE__, 'soobrandlogoslider2.tpl'); } } public function hookDisplayHeader() { if (version_compare(_PS_VERSION_, '1.7', '<')) { $this->context->controller->addCSS(($this->_path).'css/jquery.bxslider.css'); $this->context->controller->addJS(($this->_path).'js/jquery.bxslider.min.js'); } else { $this->context->controller->registerStylesheet('modules-soologoslider', 'modules/'.$this->name.'/views/css/jquery.bxslider.css', array('media' => 'all', 'priority' => 150)); $this->context->controller->registerJavascript('modules-soologoslider-js', 'modules/'.$this->name.'/views/js/jquery.bxslider.min.js', array('position' => 'bottom', 'priority' => 150)); } } } ?>
